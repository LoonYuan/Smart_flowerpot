/*******************************************************************************
* 文件名          	: huapan.ino
* 函数功能		      ：智能花盆
* 作者             	: Mr. Loon
* 生成日期  		    : 05/02/2016
* 描述		          : 智能花盆程序V1.0          
********************************************************************************/
#include <TimerOne.h>    
#include <U8glib.h>        
#include "stdio.h"
#include "stdlib.h"




//图片数据
const uint8_t yingjitongxun1[] PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x1F,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x03,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0xFC,0xFF,0xFF,0xFF,
0xFF,0xFF,0x3F,0x00,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0x1F,0x00,0xF8,0xFF,0xFF,0xFF,
0xFF,0xFF,0x1F,0x00,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x0F,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0xE0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x0F,0x38,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0xC0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x07,0xFC,0x00,0xF0,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0xC0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x07,0xFE,0x00,0xF0,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0x80,0xFF,0xFF,0xFF,
0xFF,0xFF,0x03,0xFE,0x01,0xE0,0xFF,0xFF,0xFF,0xFF,0xC0,0x1F,0x80,0xFF,0xFF,0xFF,
0xFF,0xFF,0x03,0xFF,0x01,0xE0,0xFF,0xFF,0xFF,0x7F,0xC0,0x3F,0x00,0xFF,0xFF,0xFF,
0xFF,0xFF,0x03,0xFE,0x01,0xE0,0xFF,0xFF,0xFF,0x7F,0xC0,0x3F,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0xFE,0x01,0xC0,0xFF,0xFF,0xFF,0x7F,0xC0,0x3F,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0xFE,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0xC0,0x3F,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0xFC,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x80,0x1F,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0x30,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x0F,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xFC,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xFC,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xFC,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x03,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0x7F,0x00,0x00,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x03,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0x7F,0x00,0x00,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x03,0x00,0x04,0xF0,0xFF,0xFF,0xFF,0x7F,0x00,0x00,0x00,0xFF,0xFF,0xFF,
0xFF,0xFF,0x07,0x00,0x0E,0xF0,0xFF,0xFF,0xFF,0xFF,0x00,0x80,0x01,0xFF,0xFF,0xFF,
0xFF,0xFF,0x0F,0x00,0x06,0xF8,0xFF,0xFF,0xFF,0xFF,0x00,0xC0,0x83,0xFF,0xFF,0xFF,
0xFF,0xFF,0x0F,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0x01,0x80,0x81,0xFF,0xFF,0xFF,
0xFF,0xFF,0x1F,0x00,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0xC0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x1F,0x00,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0xE0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0x00,0xF8,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x01,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0x00,0xFC,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x07,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

const uint8_t bh4mfe2[] PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xFF,0xFF,
0xFF,0x7F,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFF,
0xFF,0x3F,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,
0xFF,0x1F,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x80,0xFF,0xFF,
0xFF,0x1F,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xC0,0xFF,0xFF,
0xFF,0x7F,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xE0,0xFF,0xFF,
0xFF,0xFF,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xF8,0xFF,0xFF,
0xFF,0xFF,0x03,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0x0F,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0xFF,0xFF,0xFF,
0xFF,0xFF,0x1F,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xC0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x01,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xFC,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x03,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x00,0xFE,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x0F,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0x80,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x3F,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xE0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7F,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0x03,0xF0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x01,0xF8,0xFF,0xFF,0xFF,0xFF,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x07,0xF0,0xFF,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x0F,0xC0,0xFF,0xFF,0xFF,0x1F,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0xFF,0xFF,0xFF,0x07,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xFE,0xFF,0xFF,0x03,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xFC,0xFF,0xFF,0x03,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFE,0xFF,0xFF,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xCF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFE,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x83,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFC,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0xF8,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x3F,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x3F,0x00,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xE0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x3F,0x00,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xE0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x3F,0x00,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xE0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x3F,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0xF8,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x03,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xFC,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x8F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

const uint8_t zhengnengliang3[] PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0x3F,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0xFE,0xFF,
0xFF,0x3F,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0xFE,0xFF,
0xFF,0x3F,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0xFE,0xFF,
0xFF,0x3F,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0xFE,0xFF,
0xFF,0x3F,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0xFE,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xFE,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFC,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFC,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFC,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xFE,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

const uint8_t yuanguang4[] PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0x3F,0xF8,0xFF,0xFF,0xFF,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xFE,0xFF,
0xFF,0x0F,0xE0,0xFF,0xFF,0x3F,0x80,0xFF,0x7F,0xF0,0xFF,0xFF,0xFF,0x03,0xF8,0xFF,
0xFF,0x07,0xC0,0xFF,0xFF,0x1F,0x00,0xFF,0x1F,0xC0,0xFF,0xFF,0xFF,0x01,0xF0,0xFF,
0xFF,0x07,0xC0,0xFF,0xFF,0x1F,0x00,0xFF,0x0F,0x00,0xFF,0xFF,0xFF,0x01,0xF0,0xFF,
0xFF,0x03,0x80,0xFF,0xFF,0x0F,0x00,0xFE,0x0F,0x00,0xFE,0xFF,0xFF,0x00,0xE0,0xFF,
0xFF,0x03,0x00,0xFF,0xFF,0x0F,0x00,0xFE,0x07,0x00,0xFE,0xFF,0xFF,0x00,0xE0,0xFF,
0xFF,0x03,0x00,0xFE,0xFF,0x07,0x00,0xFE,0x07,0x00,0xF8,0xFF,0x7F,0x00,0xE0,0xFF,
0xFF,0x03,0x00,0xFE,0xFF,0x07,0x00,0xFE,0x07,0x00,0xF0,0xFF,0x7F,0x00,0xE0,0xFF,
0xFF,0x03,0x00,0xFC,0xFF,0x03,0x00,0xFE,0x07,0x00,0xF0,0xFF,0x7F,0x00,0xE0,0xFF,
0xFF,0x07,0x00,0xFC,0xFF,0x03,0x00,0xFE,0x07,0x00,0xE0,0xFF,0x1F,0x00,0xF0,0xFF,
0xFF,0x07,0x00,0xF8,0xFF,0x01,0x00,0xFE,0x0F,0x00,0xE0,0xFF,0x0F,0x00,0xF0,0xFF,
0xFF,0x07,0x00,0xF8,0xFF,0x01,0x00,0xFE,0x0F,0x00,0xC0,0xFF,0x0F,0x00,0xF8,0xFF,
0xFF,0x0F,0x00,0xF0,0xFF,0x00,0x00,0xFF,0x1F,0x00,0xC0,0xFF,0x07,0x00,0xF8,0xFF,
0xFF,0x0F,0x00,0xF0,0xFF,0x00,0x00,0xFF,0x7F,0x00,0x80,0xFF,0x07,0x00,0xF8,0xFF,
0xFF,0x1F,0x00,0xC0,0x7F,0x00,0x80,0xFF,0x7F,0x00,0x80,0xFF,0x07,0x00,0xFC,0xFF,
0xFF,0x7F,0x00,0x80,0x7F,0x00,0xE0,0xFF,0xFF,0x00,0x00,0xFF,0x07,0x00,0xFC,0xFF,
0xFF,0x7F,0x00,0x80,0x3F,0x00,0xE0,0xFF,0xFF,0x03,0x00,0xFF,0x07,0x00,0xFE,0xFF,
0xFF,0xFF,0x00,0x00,0x1E,0x00,0xF0,0xFF,0xFF,0x03,0x00,0xFE,0x01,0x00,0xFE,0xFF,
0xFF,0xFF,0x00,0x00,0x0C,0x00,0xF0,0xFF,0xFF,0x07,0x00,0xFE,0x00,0x00,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x04,0x00,0xF8,0xFF,0xFF,0x07,0x00,0xFC,0x00,0x00,0xFF,0xFF,
0xFF,0xFF,0x01,0x00,0x00,0x00,0xF8,0xFF,0xFF,0x0F,0x00,0x3C,0x00,0x80,0xFF,0xFF,
0xFF,0xFF,0x03,0x00,0x00,0x00,0xFC,0xFF,0xFF,0x0F,0x00,0x10,0x00,0x80,0xFF,0xFF,
0xFF,0xFF,0x03,0x00,0x00,0x00,0xFC,0xFF,0xFF,0x1F,0x00,0x00,0x00,0xC0,0xFF,0xFF,
0xFF,0xFF,0x07,0x00,0x00,0x00,0xFE,0xFF,0xFF,0x1F,0x00,0x00,0x00,0xC0,0xFF,0xFF,
0xFF,0xFF,0x1F,0x00,0x00,0x00,0xFE,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xE0,0xFF,0xFF,
0xFF,0xFF,0x1F,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0xE0,0xFF,0xFF,
0xFF,0xFF,0x3F,0x00,0x00,0x80,0xFF,0xFF,0xFF,0x7F,0x00,0x00,0x00,0xF0,0xFF,0xFF,
0xFF,0xFF,0xFF,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x7F,0x00,0x00,0x00,0xFC,0xFF,0xFF,
0xFF,0xFF,0xFF,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFC,0xFF,0xFF,
0xFF,0xFF,0xFF,0x01,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFE,0xFF,0xFF,
0xFF,0xFF,0xFF,0x01,0x00,0xF0,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x80,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x03,0x00,0xF0,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x80,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x0F,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0xC0,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x0F,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0x0F,0x00,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x1F,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0x0F,0x00,0xF0,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x1F,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0x1F,0x00,0xF8,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x3F,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x00,0xFE,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

const uint8_t wudeng5[] PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xEF,0xFF,0xFD,0xFF,0xFF,0xFE,0xDF,0xFF,0xFF,0xD7,0xBF,0xC0,0xFF,0xFF,
0xFF,0xFF,0xDF,0xFF,0xFD,0xFF,0xFF,0xFD,0xDF,0xFF,0xFF,0xD7,0xBF,0xDF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFD,0xFF,0xFF,0xFF,0xDF,0xFF,0xFF,0x1B,0xB8,0xDD,0xFF,0xFF,
0xFF,0xFF,0x01,0xFC,0xFD,0xFF,0x1F,0xC0,0xDF,0xFF,0xFF,0xDB,0x0B,0xDD,0xFF,0xFF,
0xFF,0xFF,0xDF,0xFF,0xFD,0xFF,0xFF,0xFD,0xDF,0xFF,0xFF,0x69,0x5D,0xDD,0xFF,0xFF,
0xFF,0xFF,0xDF,0xFF,0xFA,0xFF,0xFF,0xFD,0xAF,0xFF,0xFF,0x7A,0x5F,0x81,0xFF,0xFF,
0xFF,0xFF,0xDF,0xFF,0xFA,0xF3,0xFF,0xFD,0xAF,0x3F,0xFF,0x5B,0x5D,0xBF,0xFF,0xFF,
0xFF,0xFF,0x01,0x7C,0xF7,0xF3,0x1F,0xC0,0x77,0x3F,0xFF,0x5B,0x6B,0xBF,0xFF,0xFF,
0xFF,0xFF,0xDF,0x7F,0xF7,0xF7,0xFF,0xFD,0x77,0x7F,0xFF,0x5B,0x5B,0xA0,0xFF,0xFF,
0xFF,0xFF,0xDF,0xBF,0xEF,0xFB,0xFF,0xFD,0xFB,0xBE,0xFF,0x6B,0xBB,0xBF,0xFF,0xFF,
0xFF,0xFF,0xDF,0xDF,0xDF,0xFF,0xFF,0xFD,0xFD,0xFD,0xFF,0x7B,0x5F,0xBF,0xFF,0xFF,
0xFF,0xFF,0x00,0xE8,0xBF,0xFF,0x0F,0x80,0xFE,0xFB,0xFF,0x3B,0xEF,0xCE,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7A,0xFD,0xFF,0xFF,0xFD,0xDF,0xDF,0x9F,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7E,0xFD,0x01,0x08,0x80,0xD8,0xDF,0xE1,0x01,0x3C,0xFF,0xFF,0xFF,
0xFF,0xFF,0x08,0xB8,0x81,0xFD,0xEB,0xBF,0x1A,0x18,0xFD,0xFF,0x3D,0xFF,0xFF,0xFF,
0xFF,0xFF,0xEA,0xBE,0xBD,0xFD,0x1B,0xC0,0xEA,0x6F,0xFD,0xFF,0x3E,0xFF,0xFF,0xFF,
0xFF,0xFF,0x8A,0x9E,0xD6,0x0D,0xFB,0xFE,0xF2,0xBF,0x81,0x7F,0x3F,0xFF,0xFF,0xFF,
0xFF,0xFF,0xEA,0xAA,0xF7,0x6D,0x7B,0xDD,0x0A,0xDC,0xB5,0xBF,0x3F,0xFF,0xFF,0xFF,
0xFF,0xFF,0x8A,0xBA,0xD5,0x6D,0x9B,0xEA,0xFA,0xDD,0xB5,0xBF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xAA,0xBC,0xB5,0x0D,0x7B,0xF3,0x7A,0xDE,0xD5,0xBF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xA8,0xBC,0xB5,0xFD,0x9B,0xE9,0x98,0x5F,0xD5,0xBF,0x3F,0xFF,0xFF,0xFF,
0xFF,0xFF,0x8A,0xBA,0xB6,0xFD,0x7B,0x9A,0xEA,0x9B,0xED,0xBF,0x3F,0xFF,0xFF,0xFF,
0xFF,0xFF,0x6F,0xB9,0xF7,0x01,0x88,0xFB,0xEF,0xDB,0xD6,0xBF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xB7,0xBB,0xF3,0xFD,0xFB,0xFC,0x1F,0x78,0xBB,0x8F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

const uint8_t kong6[] PROGMEM = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};



//定义所需的变量

int health;    //正常
int dry;      //干燥
int temp;     //温度
int TEMP_H = 0;    //高温标志位
int TEMP_L = 0;    //低温标志位
int state = 0x00;   //智能花盆系统状态标志位
int STATE = 0x00;   //花盆系统异常标志位

//气温标志
#define Hot 2
#define On 1
#define Cool 0

//土壤水分标志
#define NOR 2
#define ON 1 
#define OFF 0

int people = 0;     //是否有人
int People_ON = 0;     //检测到有人标志位
int People_OFF = 0;    //检测到有人离开标志位
int BI = 0;        //第二次哔哔蜂鸣器标志位
int PE = 0;

int page = 0;      //OLED屏刷图片页数
int max_pages = 5;   //OLED内部屏刷屏最大页数

int sensor = 7;    //人体红外
int redPin = 6;    //RGB 红灯接口
int greenPin = 3;   //RGB绿灯接口
int bluePin = 11;   //RGB蓝灯接口

int  DRY_F = 0;    //土壤潮湿标志位
int  DRY_N = 0;    //土壤干燥标志位

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);   //OLED屏函数

/// --------------------------
/// Custom ISR Timer Routine
/// --------------------------

int count_1 = 0;     
int count = 0;      //定时器计数

//定时器中断函数，1ms中断一次
void timerIsr()
{
    if(BI)     //第二次蜂鸣器报警计时
    {
      count++;
      
    }  
    if(PE)
    {
        count_1++;
      }
}

/*******************************************************************************
* 函数名        : setup（）
* 函数描述    	: 初始化函数
* 输入参数      : 无
* 输出结果     	: 无
* 返回值        : 无
*******************************************************************************/
void setup() {
    Serial.begin(9600);         //使用9600速率进行串口通讯
    pinMode(A0,INPUT);         //土壤湿度数据入口
    pinMode(sensor,INPUT);     //人体红外检测数据入口
    pinMode(redPin, OUTPUT);   //红灯接口
    pinMode(greenPin, OUTPUT);  //绿灯接口
    pinMode(bluePin, OUTPUT);   //蓝灯接口
    pinMode(5, OUTPUT);         //蜂鸣器接口
    Timer1.initialize(1000000);   //定时器函数 set a timer of length 100000 microseconds (or 0.1 sec - or 10Hz => the led will blink 5 times, 5 cycles of on-and-off, per second)
    Timer1.attachInterrupt( timerIsr ); //    定时器中断函数attach the service routine here
}


/*******************************************************************************
* 函数名        : loop（）
* 函数描述      : 循环处理函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void loop() 
{
  state = 0x00;      //系统标志位清零
  STATE = 0x00;
   
  soil();        //土壤湿度检测
  infrared();     //人体红外检测
  temp_();      //温度检测
  
   if(!(STATE & 0xFF))        //一切数据状态正常时
   {
   if(state & 0x01)        //当土壤干燥时
   {
       Red_LEDdisplay(); 
       if(people == ON)   //当有人在时
       {
         if(People_ON)     //当人第一次接近时
         {
          if(DRY_N)         //当干旱第一次出现时
          {            
            bibibibi_();           //蜂鸣器bibi报警
            BI = 1;               //蜂鸣器第二次报警标志位
            DRY_N = 0;   
          }
           People_ON = 0;    
         }
          Serial.print("BIBIBIBI:");     
          Serial.println(BI);     
         page = 2;
         OLEDDisplay();      
         PE = 0;            //屏幕延迟关闭标志位清零
         count_1 = 0;     //屏幕延迟关闭计数清零
       }
      else
    {
      if(People_OFF)       //当人离开时标志位
      {
          People_OFF = 0;
          PE = 1;         //人离开时定时器计数启动标志位
        }
        if(count_1>60)      //当人离开时，延迟60S关闭屏幕
        {
              PE = 0;
              count_1 = 0;
              page = 6;
              OLEDDisplay();
          }

      }
       Serial.println("The soil drought");      
   }
   if(state & 0x02)       //当土壤过于潮湿时
   {
       Red_LEDdisplay(); 
       if(people == ON)
       {
         if(People_ON)
         {
          if(DRY_F)
          {            
            bibibibi_();          
            BI = 1;  
            DRY_F = 0;   
          }
           People_ON = 0;    
         }
         page = 3;
         OLEDDisplay();
         PE = 0;            //屏幕延迟关闭标志位清零
         count_1 = 0;     //屏幕延迟关闭计数清零
       }
      else
    {
      if(People_OFF)
      {
          People_OFF = 0;
          PE = 1;
        }
        if(count_1>60)
        {
              PE = 0;
              count_1 = 0;
              page = 6;
              OLEDDisplay();
          }

      }
       Serial.println("The soil moisture");
   }
   if(state & 0x04)      //温度过高时
   {
       Red_LEDdisplay(); 
       if(people == ON)
       {
         if(People_ON)
         {
          if(TEMP_H)
          {            
            bibibibi_();          
            BI = 1;  
            TEMP_H = 0;   
          }
           People_ON = 0;    
         }
         page = 4;
         OLEDDisplay();
         PE = 0;            //屏幕延迟关闭标志位清零
         count_1 = 0;     //屏幕延迟关闭计数清零
       }
        else
       {
      if(People_OFF)
      {
          People_OFF = 0;
          PE = 1;
        }
        if(count_1>60)
        {
              PE = 0;
              count_1 = 0;
              page = 6;
              OLEDDisplay();
          }

      }
       Serial.println("high temperature");
   }
   if(state & 0x08)       //温度过低时
   {
       Red_LEDdisplay(); 
       if(people == ON)
       {
         if(People_ON)
         {
          if(TEMP_L)
          {            
            bibibibi_();          
            BI = 1;  
            TEMP_L = 0;   
          }
           People_ON = 0;    
         }
         page = 5;
         OLEDDisplay();
         PE = 0;            //屏幕延迟关闭标志位清零
         count_1 = 0;     //屏幕延迟关闭计数清零
       }
      else
      {
         page = 6;
         OLEDDisplay();
      }
       Serial.println("low temperature");
   }
   if(!(state & 0xFF))        //一切状态正常时
   {
     Greed_LEDdisplay();  
    if(people == ON)
    {     
       page = 1;
       OLEDDisplay();
       PE = 0;            //屏幕延迟关闭标志位清零
       count_1 = 0;     //屏幕延迟关闭计数清零
    }
    else
    {
      if(People_OFF)
      {
          People_OFF = 0;
          PE = 1;
        }
        if(count_1>60)
        {
              PE = 0;
              count_1 = 0;
              page = 6;
              OLEDDisplay();
          }

      }
        Serial.println("A flower pot system normal");
   }  
   if(BI)    //出现异常情况，第二次蜂鸣器报警
   {
     if(count>10)    //定时器计时次数
     {
       BI = 0;
       count = 0;
       bibibibi_();      //第二次bibibi
     }
   }
   }
   else
   {
     Blue_LEDdisplay();    //数据异常闪蓝灯
     page = 6;
     OLEDDisplay();    
    }
 delay(200);
 Serial.println("");
}   



/*******************************************************************************
* 函数名        : Greed_LEDdisplay（）
* 函数描述      : RGB绿灯函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void Greed_LEDdisplay()
{
  int a;
  for(int a=0;a<=255;a++)
  {
    setColor(0, 0, a);  // 绿色
    delay(2);
  }
  int i;
  for(int i=255;i>=0;i--)
  {
    setColor(0, 0, i);  // 绿色
    delay(2);
  }  
   Serial.println("Green light");
}


/*******************************************************************************
* 函数名        : Red_LEDdisplay（）
* 函数描述      : RGB红灯呼吸函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void Red_LEDdisplay()
{
  int a;
  for(int a=0;a<=255;a++)
  {
    setColor(a, 0, 0);  // 红色
    delay(2);
  }
  int i;
  for(int i=255;i>=0;i--)
  {
    setColor(i, 0, 0);  // 红色
    delay(2);
  }  
  Serial.println("Red light");
}



/*******************************************************************************
* 函数名        : Blue_LEDdisplay（）
* 函数描述      : RGB蓝灯呼吸函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void Blue_LEDdisplay()
{
  int a;
  for(int a=0;a<=255;a++)
  {
    setColor(0, a, 0);  // 蓝色
    delay(2);
  }
  int i;
  for(int i=255;i>=0;i--)
  {
    setColor(0, i, 0);  // 蓝色
    delay(2);
  }  
  Serial.println("Blue light");
}




/*******************************************************************************
* 函数名        : setColor（）
* 函数描述      : RGB设置颜色函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void setColor(int red, int green, int blue)
{
  analogWrite(redPin, 255-red);
  analogWrite(greenPin, 255-green);
  analogWrite(bluePin, 255-blue);  
}



/*******************************************************************************
* 函数名        : OLEDDisplay（）
* 函数描述      : OLED显示函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void OLEDDisplay()
{
  u8g.firstPage();  
  do {   
        draw();
      } while( u8g.nextPage() );
}



/*******************************************************************************
* 函数名        : draw（）
* 函数描述      : 将图片数据写到OLED里面
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void draw(void) 
{   // graphic commands to redraw the complete screen should be placed here  
  switch(page)
    {
      case 1:  u8g.drawXBMP( 0, 0,128, 64, yingjitongxun1);  break;
      case 2:  u8g.drawXBMP( 0, 0,128, 64, bh4mfe2);  break;
      case 3:  u8g.drawXBMP( 0, 0,128, 64, zhengnengliang3);  break;
      case 4:  u8g.drawXBMP( 0, 0,128, 64, yuanguang4);  break;
      case 5:  u8g.drawXBMP( 0, 0,128, 64, wudeng5);  break;
      case 6:  u8g.drawXBMP( 0, 0,128, 64, kong6);  break;
       //case 7:  u8g.drawXBMP( 0, 0,128, 64, gps7);  break;
    }
}


/*******************************************************************************
* 函数名        : bibibibi_（）
* 函数描述      : 蜂鸣器函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void bibibibi_()
{
  digitalWrite(5,HIGH);
  delay(150);
  digitalWrite(5,LOW);
  delay(80);
  digitalWrite(5,HIGH);
  delay(150);
  digitalWrite(5,LOW);
  delay(250);
  digitalWrite(5,HIGH);
  delay(150);
  digitalWrite(5,LOW);
  delay(80);
  digitalWrite(5,HIGH);
  delay(150);
  digitalWrite(5,LOW);
  Serial.println("warning:bibi");
}



/*******************************************************************************
* 函数名        : infrared（）
* 函数描述      : 人体红外检测函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void infrared()
{
  int val = digitalRead(sensor);
  if(val)
  {
    if(people == OFF)
    {
      People_ON = 1;          //检测到有人靠近标志位     
    }
    people = ON;
    Serial.println("people on ");
  }
  else
  {
     if(people == ON)
    {
      People_OFF = 1;      //检测到有人离开标志位
    }
    people = OFF; 
      Serial.println("people off  ");
  }
}




/*******************************************************************************
* 函数名        : temp_（）
* 函数描述      : 温度检测函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void temp_()
{
  int n =0;
  int i = 0;
  int j = 0;
  
  j = analogRead(A1);    //收集一次数据检测温度传感器是否异常或没接
  if((j > 2) && (j < 1020))    //当数据异常的时候（传感器出问题或者没接的时候）
  {
     STATE = STATE & 0xfd;   //1111 1101     数据正常
  }
  else
  {
       STATE = STATE | 0x02;   //0000 0010   数据异常
   }

  for(i=0;i<10;i++)    //收集10次数据，求平均值消除异常数据
  {
     n += analogRead(A1);
     delay(3);
  }
  float vol = n * (5.0 / 1023.0*100)/10; //收集10次数据，求平均值消除异常数据
  Serial.print("temp vol:"); 
  Serial.println(vol); 
 if(vol<0)
 {
   if(temp != Cool)
   {
     TEMP_L = 1;
   }
   temp = Cool;
   state = state | 0x08;   //0000 1000
   Serial.println("temp state:cold");
 }
 else if(vol>35)
 {
   if(temp != Hot)
   {
     TEMP_H = 1;
   }
   temp = Hot;
   state = state | 0x04;   //0000 0100
   Serial.println("temp state:hot");
 }
else
 { 
     temp = On;
     state = state & 0xf3;   //1111 0011
     Serial.println("temp state normal");
  } 
}





/*******************************************************************************
* 函数名        : soil（）
* 函数描述      : 土壤湿度检测函数
* 输入参数      : 无
* 输出结果      : 无
* 返回值        : 无
*******************************************************************************/
void soil()
{
  int n = analogRead(A0);    //读取A0口的电压值
  int vol = n; //  使用双精度浮点数存储土壤数据，土壤数据由电压值换算得到
  Serial.print("soil data:");
  Serial.println(vol);  //串口输出土壤数据
  if((vol > 2) && (vol < 1020))    //当数据异常的时候（传感器出问题或者没接的时候）
  {
     STATE = STATE & 0xfe;   //1111 1110     数据正常   
  }
  else
  {
       STATE = STATE | 0x01;   //0000 0001   数据异常      
   }
   
  if((vol >= 700) &&(vol < 1020))       //数值标为750时为干旱，需要浇水
  {
    if(dry != NOR)
    {
      DRY_N = 1;
    }
      dry = NOR;
      Serial.println("soil state dry");
      state = state | 0x01;   //0000 0001
  }
  else if((vol <= 300)&&(vol > 2))    //数值标为200时为超级潮湿，为异常状态
  {
    if(dry != OFF)
    {
      DRY_F = 1;
    }
     dry = OFF;
     Serial.println("soil state damp");
     state = state | 0x02;   //0000 0010
  }
  else              //数据正常
  {
     dry = ON;  
     Serial.println("soil state normal");
     state = state & 0xfc;     //1111 1100
  }
}


